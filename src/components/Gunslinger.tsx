/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import { useEffect, useRef } from "react"
import { useAnimations, useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"
import { CharacterState, useCharacterState } from "../hooks/use-character-state"
import { crossfadeDuration } from "../config"

export const Gunslinger: React.FC<{
  state: CharacterState
}> = (props) => {
  const group = useRef<THREE.Group>(null)

  const { scene, animations } = useGLTF("/gltf/m_gunslinger.glb")

  const characterAnimations = useAnimations(animations, group)

  const previousAnimationNameRef = useRef<CharacterState>()

  useEffect(() => {
    const currentAction = characterAnimations.actions[props.state]
    if (!currentAction) {
      return
    }

    currentAction.reset()

    /* Crossfade from previous state */
    if (previousAnimationNameRef.current) {
      const previousAction =
        characterAnimations.actions[previousAnimationNameRef.current]

      if (previousAction) {
        currentAction.crossFadeFrom(previousAction, crossfadeDuration, true)
      }
    }

    currentAction.play()

    previousAnimationNameRef.current = props.state
  }, [props.state, characterAnimations.actions])

  return <primitive ref={group} object={scene} />
}
