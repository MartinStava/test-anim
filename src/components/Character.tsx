/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useSpring, animated } from "@react-spring/three"
import { useGameStore } from "../stores/game"
import { useReplayStore } from "../stores/replay"

export const Character: React.FC<{
  characterId: string
  children: React.ReactNode
}> = (props) => {
  const character = useGameStore((state) =>
    state.state.characters.find((x) => x.characterId === props.characterId)
  )

  const currentTurn = useGameStore((state) => state.currentTurn)

  const replay = useReplayStore()

  const from = character?.position ?? { x: 0, z: 0 }

  const to =
    replay.currentIndex > -1 &&
    replay.currentIndex < currentTurn.timeline.length
      ? currentTurn.timeline[replay.currentIndex].characterId ===
        props.characterId
        ? currentTurn.timeline[replay.currentIndex].destination
        : from
      : from

  const { x, z } = useSpring({
    from,
    to: { x: to.x, z: to.z },
    config: { duration: 2.5 * 1000 },
    onRest() {
      replay.next()
    },
  })

  return (
    <animated.group position-x={x} position-z={z}>
      {props.children}
    </animated.group>
  )
}
